#!/bin/bash
set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${GREEN}=== GitLab CE Deployment ===${NC}"
echo ""

# Source environment variables
ENV_FILE="/home/administrator/secrets/gitlab.env"
if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}Error: Environment file not found at $ENV_FILE${NC}"
    exit 1
fi

echo -e "${YELLOW}Loading environment configuration...${NC}"
set -a
source "$ENV_FILE"
set +a

# Create necessary directories
echo -e "${YELLOW}Creating GitLab directories...${NC}"
DATA_DIR="/home/administrator/projects/data/gitlab"
mkdir -p ${DATA_DIR}/{config,logs,data} gitlab-runner
mkdir -p /home/administrator/projects/backups/gitlab

# Check if GitLab is already running
if docker ps | grep -q "gitlab"; then
    echo -e "${YELLOW}GitLab container already exists. Removing...${NC}"
    docker stop gitlab 2>/dev/null || true
    docker rm gitlab 2>/dev/null || true
fi

# Create Docker network if it doesn't exist
echo -e "${YELLOW}Checking Docker networks...${NC}"
docker network create gitlab-net 2>/dev/null || echo "Network gitlab-net already exists"

# Generate GitLab configuration
echo -e "${YELLOW}Generating GitLab configuration...${NC}"
cat > ${DATA_DIR}/config/gitlab.rb << EOF
# GitLab configuration file
# Generated by deploy.sh

# External URL
external_url '${GITLAB_EXTERNAL_URL}'

# NGINX Configuration (behind Traefik)
nginx['listen_port'] = 80
nginx['listen_https'] = false
nginx['proxy_set_headers'] = {
  "X-Forwarded-Proto" => "https",
  "X-Forwarded-Ssl" => "on"
}

# GitLab Shell SSH
gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_SSH_PORT}

# Timezone
gitlab_rails['time_zone'] = 'America/New_York'

# Email Configuration
gitlab_rails['smtp_enable'] = ${GITLAB_SMTP_ENABLED}
gitlab_rails['smtp_address'] = "${GITLAB_SMTP_ADDRESS}"
gitlab_rails['smtp_port'] = ${GITLAB_SMTP_PORT}
gitlab_rails['smtp_user_name'] = "${GITLAB_SMTP_USER}"
gitlab_rails['smtp_password'] = "${GITLAB_SMTP_PASSWORD}"
gitlab_rails['smtp_domain'] = "${GITLAB_SMTP_DOMAIN}"
gitlab_rails['smtp_authentication'] = "plain"
gitlab_rails['smtp_enable_starttls_auto'] = true
gitlab_rails['gitlab_email_from'] = '${GITLAB_EMAIL_FROM}'
gitlab_rails['gitlab_email_reply_to'] = '${GITLAB_EMAIL_REPLY_TO}'

# Container Registry
registry_external_url '${GITLAB_REGISTRY_EXTERNAL_URL}'
gitlab_rails['registry_enabled'] = ${GITLAB_REGISTRY_ENABLED}
registry['enable'] = ${GITLAB_REGISTRY_ENABLED}
registry_nginx['listen_port'] = ${GITLAB_REGISTRY_PORT}
registry_nginx['listen_https'] = false

# Backup Configuration  
gitlab_rails['backup_keep_time'] = ${GITLAB_BACKUP_KEEP_TIME}
gitlab_rails['backup_path'] = "${GITLAB_BACKUP_PATH}"

# Performance Tuning
postgresql['shared_buffers'] = "256MB"
postgresql['max_worker_processes'] = 4
sidekiq['max_concurrency'] = 15
prometheus_monitoring['enable'] = false

# Disable services we don't need
gitlab_kas['enable'] = false
sentinel['enable'] = false
gitlab_pages['enable'] = false
EOF

# Add OIDC configuration if enabled
if [ "$GITLAB_OIDC_ENABLED" = "true" ] && [ "$GITLAB_OIDC_CLIENT_SECRET" != "will_be_generated_by_keycloak_setup" ]; then
    echo -e "${YELLOW}Adding Keycloak OIDC configuration...${NC}"
    cat >> ${DATA_DIR}/config/gitlab.rb << EOF

# Keycloak OIDC Configuration
gitlab_rails['omniauth_enabled'] = true
gitlab_rails['omniauth_allow_single_sign_on'] = ['openid_connect']
gitlab_rails['omniauth_sync_email_from_provider'] = 'openid_connect'
gitlab_rails['omniauth_sync_profile_from_provider'] = ['openid_connect']
gitlab_rails['omniauth_sync_profile_attributes'] = ['name', 'email']
gitlab_rails['omniauth_auto_sign_in_with_provider'] = 'openid_connect'
gitlab_rails['omniauth_block_auto_created_users'] = false
gitlab_rails['omniauth_providers'] = [
  {
    name: "openid_connect",
    label: "Keycloak SSO",
    args: {
      name: "openid_connect",
      scope: ["openid", "profile", "email"],
      response_type: "code",
      issuer: "${GITLAB_OIDC_ISSUER}",
      discovery: true,
      client_auth_method: "query",
      uid_field: "preferred_username",
      send_scope_to_token_endpoint: false,
      client_options: {
        identifier: "${GITLAB_OIDC_CLIENT_ID}",
        secret: "${GITLAB_OIDC_CLIENT_SECRET}",
        redirect_uri: "${GITLAB_OIDC_REDIRECT_URI}"
      }
    }
  }
]
EOF
fi

# Deploy GitLab
echo -e "${GREEN}Deploying GitLab CE...${NC}"
docker run -d \
  --name gitlab \
  --hostname ${GITLAB_HOSTNAME} \
  --restart unless-stopped \
  --memory="4g" \
  --cpus="2" \
  -p ${GITLAB_SSH_PORT}:22 \
  -v ${DATA_DIR}/config:/etc/gitlab \
  -v ${DATA_DIR}/logs:/var/log/gitlab \
  -v ${DATA_DIR}/data:/var/opt/gitlab \
  -v /home/administrator/projects/backups/gitlab:/var/opt/gitlab/backups \
  --network traefik-net \
  --add-host keycloak.ai-servicers.com:172.22.0.3 \
  --env GITLAB_ROOT_PASSWORD="${GITLAB_ROOT_PASSWORD}" \
  --env GITLAB_ROOT_EMAIL="${GITLAB_ROOT_EMAIL}" \
  --label "traefik.enable=true" \
  --label "traefik.docker.network=traefik-net" \
  --label "traefik.http.routers.gitlab.rule=Host(\`${GITLAB_HOSTNAME}\`)" \
  --label "traefik.http.routers.gitlab.entrypoints=websecure" \
  --label "traefik.http.routers.gitlab.tls=true" \
  --label "traefik.http.routers.gitlab.tls.certresolver=letsencrypt" \
  --label "traefik.http.services.gitlab.loadbalancer.server.port=80" \
  gitlab/gitlab-ce:latest

echo -e "${GREEN}✓ GitLab container started${NC}"
echo ""

# Connect to additional network
echo -e "${YELLOW}Connecting to gitlab-net network...${NC}"
docker network connect gitlab-net gitlab 2>/dev/null || echo "Already connected to gitlab-net"

echo ""
echo -e "${GREEN}=== GitLab CE Deployment Started ===${NC}"
echo ""
echo -e "${YELLOW}⏳ GitLab is initializing...${NC}"
echo "This will take 5-10 minutes on first run."
echo ""
echo -e "${BLUE}Monitor startup progress:${NC}"
echo "docker logs -f gitlab"
echo ""
echo -e "${BLUE}Check when ready:${NC}"
echo "docker logs gitlab | grep 'gitlab Reconfigured!'"
echo ""
echo -e "${GREEN}Once ready, access GitLab at:${NC}"
echo "${GITLAB_EXTERNAL_URL}"
echo ""
echo -e "${YELLOW}Login credentials:${NC}"
echo "Username: root"
echo "Password: ${GITLAB_ROOT_PASSWORD}"
echo ""
echo -e "${BLUE}SSH Git Access:${NC}"
echo "git@${GITLAB_HOSTNAME}:${GITLAB_SSH_PORT}"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Wait for GitLab to fully start (5-10 minutes)"
echo "2. Run ./setup-keycloak.sh to configure SSO"
echo "3. Run ./setup-runner.sh to add CI/CD runner"
echo "4. Run ./import-dashy.sh to import Dashy project"